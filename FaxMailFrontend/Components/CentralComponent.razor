@using DataAccessDLL.Services
@using DataAccessDLL.Interfaces
@using DataAccessDLL.Modell
@using FaxMailFrontend.Data
@using FaxMailFrontend.Components
@inject NavigationManager navigationManager
@inject IDokuService docService
@inject IStammDatenService stammDatenService
@inject ErrorHandler eh

@namespace FaxMailFrontend
@if (File != null)
{
    @if (File.Autoermittlung)
    {
        <h4>Dokumentenklasse für das File @File.FileName</h4>
        <h4>Es wurde automtische Ermittlung vorgegeben.</h4>
        <button @onclick="ManuelleUebernahme">Auf manuell umstellen</button>
    }
    else
    {
        if (!string.IsNullOrEmpty(File.DokumentenKlasse))
        {
            <p>
                <h4>Dokumentenklasse für das File @File.FileName</h4>
                <input type="text" readonly @bind=@dokumentenKlasse placeholder="keine Dokumentenklasse ausgewählt" style="flex: 1; margin: 0 10px;" />
            </p>
        }
        else
        {
            <p>
                <h4>Dokumentenklasse für das File @File.FileName</h4>
                <p>
                <p style="display: flex; justify-content: space-between;">
                    <span>
                        <div class="dropdown" style="flex: 1;">
                            <label for="dokuKlasse">Dokumentenklasse aus Favoriten:</label>
                            <select id="dokumentenklasse" @bind="dokumentenKlasse" style="width: 100%;">
                                        @foreach (var document in dokumente)
                                        {
                                    <option value="@document">@document</option>
                                        }
                            </select>
                        </div>
                    </span>
                    <input type="text" readonly @bind=@dokumentenKlasse placeholder="keine Dokumentenklasse ausgewählt" style="flex: 1; margin: 0 10px;" />
                    <span></span>
                </p>
                                </p>
                <div class="dropdown-menus" style="display: flex; justify-content: space-between;">
                    <div class="dropdown" style="flex: 1; margin-right: 10px;">
                        <label for="category">Kategorie:</label>
                        <select name="" id="category" @onchange="OnCategoryChange" style="width: 100%;">
                                @foreach (var category in Categories)
                                {
                                <option value="@category">@category</option>
                                }
                        </select>
                        <button class="btn-primary" @onclick="AutomatischeUebernahme" style="display: block; margin: 10px auto;">Automatische Übernahme der Dokumentenklasse</button>
                    </div>
                    @if (!string.IsNullOrEmpty(selectedCategory))
                    {
                    <div class="dropdown" style="flex: 1; margin-right: 10px;">
                        <label for="unterkategorie">Unterkategorie:</label>
                        <select id="unterkategorie" @onchange="OnSubCategoryChange" style="width: 100%;">
                                @foreach (var unterkategorie in Unterkategorien)
                                {
                                <option value="@unterkategorie">@unterkategorie</option>
                                }
                        </select>
                        <button class="btn-primary" @onclick="FavoritenHinzufuegen" style="display: block; margin: 10px auto;">
                            <img src="@GetFavoritIcon()" alt="Favoriten" style="vertical-align: middle; margin-right: 5px; width: 30px; height: 30px;" />Favoriten hinzufügen/abwählen
                        </button>
                    </div>
                    }
                    @if (!string.IsNullOrEmpty(selectedunterkategory) || !dokumentenKlasseDekativiert)
                    {
                    <div class="dropdown" style="flex: 1;">
                        <label for="dokuKlasse">Dokumentenklasse:</label>
                        <select id="dokumentenklasse" @bind="dokumentenKlasse" style="width: 100%;">
                                @foreach (var document in dokumente)
                                {
                                <option value="@document">@document</option>
                                }
                        </select>
                        <div style="display: flex; justify-content: center; margin-top: 10px;">
                            <button class="btn-outline-primary" @onclick="Weiter" style="width: 100%;" disabled="@(string.IsNullOrEmpty(dokumentenKlasse))">Weiter</button>
                        </div>
                    </div>
                    }
                </div>
            </p>
        }
  @*       <div>
            <p>
                <h4>Dokumentenklasse für das File @File.FileName</h4>
                <p>
                    <p style="display: flex; justify-content: space-between;">
                        <span>
                            <div class="dropdown" style="flex: 1;">
                                <label for="dokuKlasse">Dokumentenklasse aus Favoriten:</label>
                                <select id="dokumentenklasse" @bind="dokumentenKlasse" style="width: 100%;">
                                    @foreach (var document in dokumente)
                                    {
                                        <option value="@document">@document</option>
                                    }
                                </select>
                            </div>
                        </span>
                        <input type="text" readonly @bind=@dokumentenKlasse placeholder="keine Dokumentenklasse ausgewählt" style="flex: 1; margin: 0 10px;" />
                        <span></span>
                    </p>
                </p>
                <div class="dropdown-menus" style="display: flex; justify-content: space-between;">
                    <div class="dropdown" style="flex: 1; margin-right: 10px;">
                        <label for="category">Kategorie:</label>
                        <select name="" id="category" @onchange="OnCategoryChange" style="width: 100%;">
                            @foreach (var category in Categories)
                            {
                                <option value="@category">@category</option>
                            }
                        </select>
                        <button class="btn-primary" @onclick="AutomatischeUebernahme" style="display: block; margin: 10px auto;">Automatische Übernahme der Dokumentenklasse</button>
                    </div>
                    @if (!string.IsNullOrEmpty(selectedCategory))
                    {
                        <div class="dropdown" style="flex: 1; margin-right: 10px;">
                            <label for="unterkategorie">Unterkategorie:</label>
                            <select id="unterkategorie" @onchange="OnSubCategoryChange" style="width: 100%;">
                                @foreach (var unterkategorie in Unterkategorien)
                                {
                                    <option value="@unterkategorie">@unterkategorie</option>
                                }
                            </select>
                            <button class="btn-primary" @onclick="FavoritenHinzufuegen" style="display: block; margin: 10px auto;">  
                                <img src="@GetFavoritIcon()" alt="Favoriten" style="vertical-align: middle; margin-right: 5px; width: 30px; height: 30px;" />Favoriten hinzufügen/abwählen  
                            </button>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(selectedunterkategory) || !dokumentenKlasseDekativiert)
                    {
                        <div class="dropdown" style="flex: 1;">
                            <label for="dokuKlasse">Dokumentenklasse:</label>
                            <select id="dokumentenklasse" @bind="dokumentenKlasse" style="width: 100%;">
                                @foreach (var document in dokumente)
                                {
                                    <option value="@document">@document</option>
                                }
                            </select>
                            <div style="display: flex; justify-content: center; margin-top: 10px;">  
                                <button class="btn-outline-primary" @onclick="Weiter" style="width: 100%;" disabled="@(string.IsNullOrEmpty(dokumentenKlasse))">Weiter</button>  
                            </div>
                        </div>
                    }
                </div>
            </p>
            @if (@File.KanalartApproved)
            {
                <p>
                    <h2>Kanalart</h2>
                </p>
                @if (@File.OrdnungsbegriffAppoved)
                {
                    <p>
                        <h2>Ordnungsbegriff</h2>
                    </p>
                    @if (@File.SuchergebnisAppoved)
                    {
                        <p>
                            <h2>Suchergebnis Ordnungsbegriff</h2>
                        </p>
                        @if (@File.WeitereOB)
                        {
                            <p>
                                <h2>Weitere Ordnungsbegriffe</h2>
                            </p>
                            @if (@File.Mailbody)
                            {
                                <p>
                                    <h2>Mailbody</h2>
                                </p>
                            }
                        }
                    }
                }
                @if (@File.AbsendenApproved)
                {
                    <p>
                        <h2>Sichern oder Verwerfen</h2>
                    </p>
                }
            }
        </div> *@
        <p>

                <p>  
                   <button @onclick="ResetComponent">Reset Vorgang</button>  
                </p>  

                @code {  
                   private void ResetComponent()  
                   {  
                       selectedCategory = null;  
                       selectedunterkategory = null;  
                       dokumentenKlasse = null;  
                       Unterkategorien.Clear();  
                       dokumente.Clear();  
                       File = null;  
                       StateHasChanged();  
                   }  
                }
        </p>
    }
}

@code {
    [Parameter]
    public FileInformation? File { get; set; }
    [Parameter]
    public EventCallback<FileInformation> OnFileUpdated { get; set; }
    private List<string> Categories = new();
    private List<string> Unterkategorien = new();
    private List<string> dokumente = new();
    private string? selectedCategory;
    private string? selectedunterkategory;
    private string? dokumentenKlasse;
    private bool dokumentenKlasseDekativiert = true;
    private bool isFavorit = false;

    private string GetFavoritIcon()
    {
        return isFavorit ? "images/GreenStar.png" : "images/YellowStar.png";
    }
    private async Task AutomatischeUebernahme()
    {
        File!.Autoermittlung = true;
        File!.isSaved = true;
        StateHasChanged();
    }
    private void ManuelleUebernahme()
    {
        File!.Autoermittlung = false;
        StateHasChanged();
    }

    private void FavoritenHinzufuegen()
    {
        isFavorit = !isFavorit;

        StateHasChanged();
    }

    private async Task Weiter()
    {
        File!.DokumentenKlasse = dokumentenKlasse!;
        await OnFileUpdated.InvokeAsync (File);
        //File.KanalartApproved = true;
        StateHasChanged();

        // Implement logic for proceeding to the next step
    }
    protected override async Task OnInitializedAsync()
    {
        if (File!= null)
        {
            try
            {
                Categories = await docService.GettAllKategories();
                selectedCategory = Categories.First();
                OnCategoryChange(new ChangeEventArgs { Value = Categories[0] });
            }
            catch (Exception ex)
            {
                eh.Systemmessage = ex.Message;
                eh.EC = ErrorCode.VerzeichnisKonnteNichtAngelegtWerden;
                navigationManager.NavigateTo($"/ErrorPage");
            }
        }

    }

    private void OnCategoryChange(ChangeEventArgs e)
    {
        if (File != null)
        {
            selectedCategory = e.Value?.ToString();
            if (!string.IsNullOrEmpty(selectedCategory))
            {
                try
                {
                    Unterkategorien = docService.GettAllSubKategoriesByKategorySync(selectedCategory);
                    OnSubCategoryChange(new ChangeEventArgs { Value = Unterkategorien[0] });
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    eh.Systemmessage = ex.Message;
                    eh.EC = ErrorCode.VerzeichnisKonnteNichtAngelegtWerden;
                    navigationManager.NavigateTo($"/ErrorPage");
                }
            }
        }
    }
    private void OnSubCategoryChange(ChangeEventArgs e)
    {
        if (File != null)
        {
            selectedunterkategory = e.Value?.ToString();
            if (!string.IsNullOrEmpty(selectedunterkategory))
            {
                try
                {
                    dokumente = docService.GettAllDocumentsBySubkategorySync(selectedunterkategory!, selectedCategory!);
                    File!.DokumentenKlasse = dokumentenKlasse!;
                    StateHasChanged();
                }
                catch (Exception ex)
                {
                    eh.Systemmessage = ex.Message;
                    eh.EC = ErrorCode.VerzeichnisKonnteNichtAngelegtWerden;
                    navigationManager.NavigateTo($"/ErrorPage");
                }
            }
        }

    }
    protected async override Task OnParametersSetAsync()
    {
        base.OnParametersSet();

        selectedCategory = null;
        selectedunterkategory = null;
        dokumentenKlasse = null;
        Unterkategorien.Clear();
        dokumente.Clear();
        if (File != null)
        {
            try
            {
                // Categories = await docService.GettAllKategories();
                Categories = docService.GettAllKategoriesSync();
                // selectedCategory = Categories.First();
                OnCategoryChange(new ChangeEventArgs { Value = Categories[0] });
            }
            catch (Exception ex)
            {
                eh.Systemmessage = ex.Message;
                eh.EC = ErrorCode.VerzeichnisKonnteNichtAngelegtWerden;
                navigationManager.NavigateTo($"/ErrorPage");
            }
        }
        
    }
}
