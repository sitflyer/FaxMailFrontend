@namespace FaxMailFrontend
@using DataAccessDLL.Services
@using DataAccessDLL.Interfaces
@using DataAccessDLL.Modell
@using FaxMailFrontend.Data
@using FaxMailFrontend.Components
@inject NavigationManager navigationManager
@inject IDokuService docService
@inject IStammDatenService stammDatenService
@inject ErrorHandler eh

@if (FH != null)
{
    if (FH.Files.Count == 0 || FH.selectedFileIndex == -1)
    {
        <p>Keine Datei ausgewählt</p>
    }
    else
    {
        <h4>Dokumentenklasse für das File @FH.Files[FH.selectedFileIndex].FileName</h4>
        @if (FH.Files[FH.selectedFileIndex].Autoermittlung)
        {
            <h4>Es wurde automtische Ermittlung vorgegeben.</h4>
            <button @onclick="ManuelleUebernahme">Auf manuell umstellen</button>
        }
        else
        {
            @if (string.IsNullOrEmpty(FH.Files[FH.selectedFileIndex].DokumentenKlasse))
            {
                <p>Dokuklasse ist null or empty</p>
                <button @onclick="SetDokumentenKlasse">Setze Dokuklasse</button>
                <button @onclick="AutomatischeUebernahme">Setze Dokuklasse automatisch</button>
            }
            else
            {
                <p>
                    Dokuklasse = @FH.Files[FH.selectedFileIndex].DokumentenKlasse
                </p>
            }
            @if (FH.Files[FH.selectedFileIndex].KanalartApproved)
            {
                <p>
                    @if (FH.Files[FH.selectedFileIndex].KanalArt == KanalArt.Beide)
                    {
                        <div style="display: flex; justify-content: space-between;">
                            <button style="width: 48%;" @onclick="() => SetKanalArt(KanalArt.lateScan)">LateScan</button>
                            oder
                            <button style="width: 48%;" @onclick="() => SetKanalArt(KanalArt.EPost)">EPost</button>
                        </div>
                    }
                    else if (FH.Files[FH.selectedFileIndex].KanalArt == KanalArt.lateScan)
                    {
                        <p>
                            Selektierte Kanalart ist: LateScan
                        </p>
                    }
                    else if (FH.Files[FH.selectedFileIndex].KanalArt == KanalArt.EPost)
                    {
                        <p>
                            Selektierte Kanalart ist: EPost
                        </p>
                    }
                    else
                    {
                        <p>
                            <strong style="color:red;">Kanalartermittlung ist fehlgeschlagen!</strong>
                        </p>
                    }
                </p>
            }
            @if (FH.Files[FH.selectedFileIndex].OrdnungsbegriffAppoved)
            {
                @if (FH.Files[FH.selectedFileIndex].Ordnugsbegrff == Ordnungsbegriff.KVNR)
                {
                    @if (string.IsNullOrEmpty(FH.Files[FH.selectedFileIndex].KVNR))
                    {
                        <label for="kvnrInput">KVNR:</label>
                        <input id="kvnrInput" @bind="FH.Files[FH.selectedFileIndex].KVNR" @oninput="ValidateKVNR" />
                        <button @onclick="OBWeiter" disabled="@(!isKVNRValid)">Übernehmen</button>
                    }
                    else
                    {
                        <p>
                            Selektierte KVNR = @FH.Files[FH.selectedFileIndex].KVNR
                        </p>
                    }
                }
                else if (FH.Files[FH.selectedFileIndex].Ordnugsbegrff == Ordnungsbegriff.BTNR)
                {
                    @if (string.IsNullOrEmpty(FH.Files[FH.selectedFileIndex].BTNR))
                    {
                        <label for="btnrInput">BTNR:</label>
                        <input id="btnrInput" @bind="FH.Files[FH.selectedFileIndex].BTNR" @oninput="ValidateBTNR" />
                        <button @onclick="OBWeiter" disabled="@(!isBTNRValid)">Übernehmen</button>
                    }
                    else
                    {
                        <p>
                            Selektierte BTNR = @FH.Files[FH.selectedFileIndex].BTNR
                        </p>
                    }
                }
                else if (FH.Files[FH.selectedFileIndex].Ordnugsbegrff == Ordnungsbegriff.GPNR)
                {
                    @if (string.IsNullOrEmpty(FH.Files[FH.selectedFileIndex].GPNR))
                    {
                        <label for="gpnrInput">GPNR:</label>
                        <input id="gpnrInput" @bind="FH.Files[FH.selectedFileIndex].GPNR" @oninput="ValidateGPNR" />
                        <button @onclick="OBWeiter" disabled="@(!isGPNRValid)">Übernehmen</button>
                    }
                    else
                    {
                        <p>
                            Selektierte GPNR = @FH.Files[FH.selectedFileIndex].GPNR
                        </p>
                    }
                }
                else if (FH.Files[FH.selectedFileIndex].Ordnugsbegrff == Ordnungsbegriff.Leik)
                {
                    @if (string.IsNullOrEmpty(FH.Files[FH.selectedFileIndex].LEIK))
                    {
                        <label for="leikInput">LEIK:</label>
                        <input id="leikInput" @bind="FH.Files[FH.selectedFileIndex].LEIK" @oninput="ValidateLEIK" />
                        <button @onclick="OBWeiter" disabled="@(!isLEIKValid)">Übernehmen</button>
                    }
                    else
                    {
                        <p>
                            Selektierte LEIK = @FH.Files[FH.selectedFileIndex].LEIK
                        </p>
                    }
                }
                else if (FH.Files[FH.selectedFileIndex].Ordnugsbegrff == Ordnungsbegriff.Keiner)
                {
                    @if (FH.Files[FH.selectedFileIndex].Ordnugsbegrff == Ordnungsbegriff.Keiner)
                    {
                        <p>
                            Es wird kein Ordnungsbegriff benötigt
                        </p>
                        @OBWeiter()
                    }
                }
                else
                {
                    <p>
                        <strong style="color:red;">Ordnungsbegriffsermittlung ist fehlgeschlagen!</strong>
                    </p>
                }
            }
            @if (FH.Files[FH.selectedFileIndex].SuchergebnisAppoved)
            {
                <p>
                    Das Suchergebnis lautet: <span style="color:red;">XXX YYYY ZZZZZ</span>
                </p>
            }
            @if (FH.Files[FH.selectedFileIndex].WeitereOB)
            {
                @if (!FH.Files[FH.selectedFileIndex].MailBodyApproved)
                {
                    <p>
                        Weitere OB sind optional: Fallnummer / Fallbündelnr./ optional Produktgruppe
                        <button @onclick="WeitereOBWeiter">Setze weitere Werte</button>
                    </p>
                }
                else
                {
                    <p>
                        Weitere OBs:
                        Fallbündelnummer = @FH!.Files[FH.selectedFileIndex].Fallbuendelnummer
                        Fallnummer = @FH!.Files[FH.selectedFileIndex].Fallnummer
                        Produktgrupper = @FH!.Files[FH.selectedFileIndex].Produktgruppe = "PG123"
                    </p>
                }
            }
            @if (FH.Files[FH.selectedFileIndex].MailBodyApproved)
            {
                @if (FH.Files[FH.selectedFileIndex].MailbodyVerakten == BodyVeraktung.unbestimmt)
                {
                    <p>
                        Mailbody verakten ja/nein
                        <button @onclick="FinalWeiter">Setze Bodyveraktung</button>
                    </p>
                }
                else
                {
                    <p>
                        MailbodyVeraktung = @FH.Files[FH.selectedFileIndex].MailbodyVerakten
                    </p>
                }

            }
        }
    }
    if (FH.Files.Count != 0 && FH.selectedFileIndex != -1)    
    {
        <p>
            <br />
            <button @onclick="VorgangReset">Diesen Vorgang resetten</button>
        </p>
    }

}

@code {
    [Parameter]
    public FileHandler? FH { get; set; }
    [Parameter]
    public EventCallback<FileHandler> OnFileHandlerChanged { get; set; }

    private bool isKVNRValid = false;
    private bool isBTNRValid = false;
    private bool isGPNRValid = false;
    private bool isLEIKValid = false;
    private async Task SetKanalArt(KanalArt kanalArt)
    {
        FH!.Files[FH.selectedFileIndex].KanalArt = kanalArt;
        await OnFileHandlerChanged.InvokeAsync(FH);
        FH!.Files[FH.selectedFileIndex].OrdnungsbegriffAppoved = true;
        StateHasChanged();
    }
    private void ValidateGPNR(ChangeEventArgs e)
    {
        var input = e.Value?.ToString();
        isGPNRValid = !string.IsNullOrEmpty(input) && (input.Length == 20);
    }
    private void ValidateLEIK(ChangeEventArgs e)
    {
        var input = e.Value?.ToString();
        isBTNRValid = !string.IsNullOrEmpty(input) && (input.Length == 20);
    }
    private void ValidateBTNR(ChangeEventArgs e)
    {
        var input = e.Value?.ToString();
        isLEIKValid = !string.IsNullOrEmpty(input) && (input.Length == 20);
    }
    private void ValidateKVNR(ChangeEventArgs e)
    {
        var input = e.Value?.ToString();
        isKVNRValid = !string.IsNullOrEmpty(input) && (input.Length == 9 || input.Length == 10);
    }
    private void VorgangReset()
    {
        FH!.Files[FH.selectedFileIndex].DokumentenKlasse = string.Empty;
        FH!.Files[FH.selectedFileIndex].Autoermittlung = false;
        FH!.Files[FH.selectedFileIndex].isSaved = false;
        StateHasChanged();
    }
    private async Task KanalArtWeiter()
    {
        FH!.Files[FH.selectedFileIndex].KanalArt = KanalArt.Beide;
        FH!.Files[FH.selectedFileIndex].OrdnungsbegriffAppoved = true;
        await OnFileHandlerChanged.InvokeAsync(FH);
        StateHasChanged();
    }
    private async Task OBWeiter()
    {
        switch (FH!.Files[FH.selectedFileIndex].Ordnugsbegrff)
        {
            case Ordnungsbegriff.KVNR:
                
                break;
            case Ordnungsbegriff.BTNR:
                
                break;
            case Ordnungsbegriff.GPNR:
                
                break;
            case Ordnungsbegriff.Leik:
                
                break;
            case Ordnungsbegriff.Keiner:

                break;
            default:
                break;

        }

        FH!.Files[FH.selectedFileIndex].SuchergebnisAppoved = true;
        FH!.Files[FH.selectedFileIndex].WeitereOB = true;
        await OnFileHandlerChanged.InvokeAsync(FH);
        StateHasChanged();
    }
    private async Task WeitereOBWeiter()
    {
        FH!.Files[FH.selectedFileIndex].Fallbuendelnummer = "FB123454";
        FH!.Files[FH.selectedFileIndex].Fallnummer = "FN87654321";
        FH!.Files[FH.selectedFileIndex].Produktgruppe = "PG123";
        FH!.Files[FH.selectedFileIndex].MailBodyApproved = true;
        await OnFileHandlerChanged.InvokeAsync(FH);
        StateHasChanged();
    }
    private async Task FinalWeiter()
    {
        FH!.Files[FH.selectedFileIndex].MailbodyVerakten = BodyVeraktung.Ja;
        FH!.Files[FH.selectedFileIndex].isSaved = true;

        await OnFileHandlerChanged.InvokeAsync(FH);
        StateHasChanged();
    }

    private async Task SetDokumentenKlasse()
    {
        FH!.Files[FH.selectedFileIndex].DokumentenKlasse = "Widerspruch YLAMI41105";
        FH!.Files[FH.selectedFileIndex].KanalartApproved = true;
        FH!.Files[FH.selectedFileIndex].Cascade = GetCascade(FH!.Files[FH.selectedFileIndex].DokumentenKlasse);
        FH!.Files[FH.selectedFileIndex].KanalArt = FH!.Files[FH.selectedFileIndex].Cascade!.KanalVorgabe;
        FH!.Files[FH.selectedFileIndex].Ordnugsbegrff = FH!.Files[FH.selectedFileIndex].Cascade!.OBVorgabe;
        FH!.Files[FH.selectedFileIndex].WOB = FH!.Files[FH.selectedFileIndex].Cascade!.WOBVorgabe;
        FH!.Files[FH.selectedFileIndex].MailbodyVerakten = FH!.Files[FH.selectedFileIndex].Cascade!.BodyVeraktenVorgabe;

        await OnFileHandlerChanged.InvokeAsync(FH);
        StateHasChanged();
    }
    private Cascade GetCascade(string dokumentenKlasse)
    {
        try
        {
            IDokumentenProcessor? dp = FH!.DokumentenListe.Find(x => x.Dokumentklasse == dokumentenKlasse);
            Cascade cascade = new Cascade(dp!.Kanalart, dp.Ob, dp.OtherOb, dp.Mailbody);
            return cascade;
        }
        catch (Exception ex)
        {
            throw new Exception($"Dokumentenklasse {dokumentenKlasse} nicht gefunden");
        }
        
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        try
        {
            StateHasChanged();
        }
        catch (Exception ex)
        {
            throw new Exception($"Error while setting parameters: {ex.Message}");
        }
    }
    private async Task ManuelleUebernahme()
    {
        if (FH!.Files[FH.selectedFileIndex].Autoermittlung)
        {
            FH!.Files[FH.selectedFileIndex].isSaved = false;
            FH!.Files[FH.selectedFileIndex].Autoermittlung = false;
        }
        else
        {
            FH!.Files[FH.selectedFileIndex].isSaved = true;
            FH!.Files[FH.selectedFileIndex].Autoermittlung = true;
        }
        await OnFileHandlerChanged.InvokeAsync(FH);
        StateHasChanged();
    }
    private async Task AutomatischeUebernahme()
    {
        FH!.Files[FH.selectedFileIndex].Autoermittlung = true;
        FH!.Files[FH.selectedFileIndex].isSaved = true;
        await OnFileHandlerChanged.InvokeAsync(FH);
        StateHasChanged();
    }
}
